<!-- レース　詳細ページ　仮配置  -->
<% if @card and @card.errors.any? %>
  <div id="error_explanation">
    <h2><%= pluralize(@card.errors.count, "error") %> prohibited this book from being saved:</h2>
    <ul>
    <% @card.errors.full_messages.each do |msg| %>
      <li><%= msg %></li>
    <% end %>
    </ul>
  </div>
<% end %>

<!-- エラーメッセージ。TODO 協調表示する -->
<% if flash[:error] %>
  <div id="error_explanation">
    <p><%= flash[:error] %></p>
  </div>
<% end %>

<% if flash[:notice] %>
  <p><%= flash[:notice] %></p>
<% end %>

<h2 style="display:block;background:#333;padding:10px;color:#FFF;font-size:190%;font-weight:bold;border-radius:5px 5px 0 0">
	<i class="icon-trophy icon-margin-right" style="font-size:120%;font-weight:normal;color: yellow"></i>
	<%= @race.name %>
</h2>

<!-- ここに form タグを挿入すること -->
<% unless @card %>
  <%= form_tag voting_cards_path(@race), id: 'vote-form' do %>
    <%= render 'races/race_table' %>
  <% end %>
<% else %>
  <%= render 'races/race_table' %>
<% end %>

<!--
<script type="text/javascript" charset="utf-8">
/**
 *　Voting Validation
 * 投票のバリデーションを行う 
 */
$(window).load(function()
{
	var voteForm = $("#vote-form");
	var require = $(".require");
	var checkMaxCount = 3;
	var horseCount = 10
	var errorAlertMessage = '必須項目を全て、選択してから投票してください！';
	var errorLabel = 'valid-error';
	var successLabel = 'valid-success';
	var errorLabelMessage = '3つ';
	var successLabelMessage = 'OK';
	
	validateInitialize();

	/**
	 * 投票フォームを送信した時に
	 * weightを選択したかチェックする。
	 * 全部選択していたら、送信画面へ。
	 * @return boolean(void)
	 */
	voteForm.submit(function()
	{
		if ( _getCheckCount() === checkMaxCount )
		{
			alert("この値ならば登録できます");
			return true;
		} 
		else
		{
			alert('登録できねーよ');
		}
		_validateDisplay();
		return false;
	});
	
	/**
	 * 投票フォームの必須項目の選択内容が、
	 * 選択した時に、他の必須項目も正しいかどうか
	 * リアルタイムで確認させるための処理。
	 * @return void
	 */
	require.change(function()
	{
		_validateDisplay();
	});
	
	
	/**
	 * チェックされた項目数をカウントする
	 * @return integer
	 */
	function _getCheckCount()
	{
		var checkCount = 0
		require.each(function()
		{
			if( $(this).val().length > 0  ) checkCount++;
		});
		return checkCount;
	}
	
	/**
	 * 不正解だったらエラー表示
	 * 正解だったら表示 
	 */
	function _validateDisplay()
	{
		var errorMessage = null;
		if( _getCheckCount() === checkMaxCount )
		{
			require.each(function()
			{
				_successMessage( $(this).attr('id') );
			});
		}
		else if(_getCheckCount() > checkMaxCount)
		{
			errorMessage = _getCheckCount() - checkMaxCount + 'つ越え';
			require.each(function()
			{
				_errorMessage( $(this).attr('id') , errorMessage );
			});
		}
		else if(_getCheckCount() < checkMaxCount)
		{
			errorMessage =  checkMaxCount - _getCheckCount() + 'つ';
			require.each(function()
			{
				_errorMessage( $(this).attr('id') , errorMessage );
			});
		}
	}
	
	/**
	 * 画面読み込み時に、投票フォームの
	 * 項目を確認する。戻る等のボタンを押して
	 * キャッシュが残っている時にも対応。
	 * @return void
	 */
	function validateInitialize()
	{
		_validateDisplay();
	}
	
	/**
	 * 選択項目が正しい時のメッセージ
	 * @param id string
	 * @return void
	 */
	function _successMessage(id)
	{
		if(typeof id !== 'undefined')
		{
			$('label[for="'+id+'"]')
				.removeClass( errorLabel )
				.addClass( successLabel );
			$('label[for="'+id+'"]')
				.text( successLabelMessage );
		}
	}
	
	/**
	 * 選択項目が誤っている時のメッセージ
	 * @param id string
	 * @return void
	 */
	function _errorMessage(id,message)
	{
		if ( typeof message === 'undefined' ) message = errorLabelMessage; 
		if(typeof id !== 'undefined')
		{
			$('label[for="'+id+'"]')
				.removeClass( successLabel )
				.addClass( errorLabel );
			$('label[for="'+id+'"]')
				.text( message );
		}
	}
});
</script>
-->
